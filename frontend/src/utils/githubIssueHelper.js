/**
 * Helper function to generate GitHub issue creation URLs
 * @param {Object} params - Parameters for the GitHub issue
 * @param {string} params.owner - Repository owner (username or organization)
 * @param {string} params.repo - Repository name
 * @param {string} params.title - Issue title
 * @param {string} params.body - Issue body/description
 * @param {string|Array} params.labels - Issue labels (string or array of strings)
 * @param {string|Array} params.assignees - Issue assignees (string or array of usernames)
 * @returns {string} Complete GitHub issue creation URL
 */
export const getIssueLink = ({ owner, repo, title, body, labels, assignees }) => {
  if (!owner || !repo) {
    throw new Error('Owner and repo are required parameters');
  }

  const baseUrl = `https://github.com/${owner}/${repo}/issues/new`;
  const params = new URLSearchParams();

  // Add title if provided
  if (title) {
    params.append('title', title);
  }

  // Add body if provided
  if (body) {
    params.append('body', body);
  }

  // Add labels if provided
  if (labels) {
    const labelArray = Array.isArray(labels) ? labels : [labels];
    labelArray.forEach(label => {
      if (label && label.trim()) {
        params.append('labels', label.trim());
      }
    });
  }

  // Add assignees if provided
  if (assignees) {
    const assigneeArray = Array.isArray(assignees) ? assignees : [assignees];
    assigneeArray.forEach(assignee => {
      if (assignee && assignee.trim()) {
        params.append('assignees', assignee.trim());
      }
    });
  }

  const queryString = params.toString();
  return queryString ? `${baseUrl}?${queryString}` : baseUrl;
};

/**
 * Helper function to generate GitHub issue link from an issue object
 * @param {Object} issue - The issue object from the analysis
 * @param {string} owner - Repository owner
 * @param {string} repo - Repository name
 * @param {Object} options - Additional options
 * @param {Array} options.defaultLabels - Default labels to add
 * @param {Array} options.defaultAssignees - Default assignees to add
 * @returns {string} Complete GitHub issue creation URL
 */
export const getIssueLinkFromIssue = (issue, owner, repo, options = {}) => {
  const { defaultLabels = [], defaultAssignees = [] } = options;

  // Generate issue title
  const title = `${issue.severity.toUpperCase()}: ${issue.title}`;

  // Generate issue body
  let body = `## Description\n${issue.description}\n\n`;
  
  if (issue.suggestion) {
    body += `## Suggestion\n${issue.suggestion}\n\n`;
  }

  body += `## Details\n`;
  body += `- **Category:** ${issue.category}\n`;
  body += `- **File:** \`${issue.file_path}\`${issue.line_number ? `:${issue.line_number}` : ''}\n`;
  body += `- **Detection Method:** ${issue.metadata?.ai_detected ? 'AI Analysis' : 'Static Analysis'}\n\n`;

  if (issue.code_snippet) {
    body += `## Code Snippet\n\n`;
    body += `\`\`\`${getFileLanguage(issue.file_path)}\n`;
    body += `${formatCodeSnippet(issue.code_snippet)}\n`;
    body += `\`\`\`\n\n`;
  }

  body += `---\n`;
  body += `*This issue was automatically generated by Code Quality Intelligence Agent*\n`;

  // Generate labels based on issue properties
  const labels = [
    ...defaultLabels,
    `severity:${issue.severity}`,
    `category:${issue.category}`,
    issue.metadata?.ai_detected ? 'ai-detected' : 'static-analysis'
  ].filter(Boolean);

  return getIssueLink({
    owner,
    repo,
    title,
    body,
    labels,
    assignees: defaultAssignees
  });
};

/**
 * Helper function to get file language from file path
 * @param {string} filePath - The file path
 * @returns {string} Language identifier
 */
const getFileLanguage = (filePath) => {
  const extension = filePath.split('.').pop()?.toLowerCase();
  const languageMap = {
    'py': 'python',
    'js': 'javascript',
    'jsx': 'javascript',
    'ts': 'typescript',
    'tsx': 'typescript',
    'java': 'java',
    'go': 'go',
    'rs': 'rust',
    'cpp': 'cpp',
    'c': 'c',
    'cs': 'csharp',
    'php': 'php',
    'rb': 'ruby',
    'swift': 'swift',
    'kt': 'kotlin',
    'scala': 'scala',
    'sh': 'bash',
    'bash': 'bash',
    'yaml': 'yaml',
    'yml': 'yaml',
    'json': 'json',
    'xml': 'xml',
    'html': 'html',
    'css': 'css',
    'scss': 'scss',
    'sass': 'sass',
    'less': 'less',
    'sql': 'sql',
    'md': 'markdown',
    'dockerfile': 'dockerfile'
  };
  return languageMap[extension] || 'text';
};

/**
 * Helper function to format code snippet for display
 * @param {string} snippet - The code snippet
 * @returns {string} Formatted code snippet
 */
const formatCodeSnippet = (snippet) => {
  if (!snippet) return '';
  
  // The snippet comes from backend with line numbers in format "1234|    code" or "1234|>>> code"
  // We'll preserve the line numbers and highlight the problematic line
  return snippet.split('\n').map(line => {
    // Match format: "1234|    code" or "1234|>>> code"
    const match = line.match(/^\s*(\d+)\|\s*(>>>\s*)?(.*)$/);
    if (match) {
      const [, lineNum, highlight, code] = match;
      if (highlight) {
        // This is the problematic line - we'll mark it for special styling
        return `>>> ${lineNum.padStart(4)} | ${code}`;
      } else {
        return `    ${lineNum.padStart(4)} | ${code}`;
      }
    }
    return line;
  }).join('\n');
};
